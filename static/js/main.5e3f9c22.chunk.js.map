{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/scroll/scroll.component.jsx","containers/app/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","monster","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","monsters","map","item","card_component_Card","key","SearchBox","placeHolder","onSearchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","length","search_box_component_SearchBox","scroll_component_Scroll","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAGaA,SAAO,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,QAAF,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAK,UACVC,IAAG,wBAAAC,OAA4BP,EAAQQ,GAApC,4BAEHP,EAAAC,EAAAC,cAAA,cAAOH,EAAQS,KAAf,KACAR,EAAAC,EAAAC,cAAA,SAAKH,EAAQU,UCLRC,SAAW,SAAAZ,GAAgB,IAAda,EAAcb,EAAda,SACtB,OACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aAEbQ,EAASC,IAAI,SAACC,GAAD,OACTb,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAQF,EAAKN,GAAKR,QAAWc,SCLlCG,SAAY,SAAAlB,GAAA,IAAEmB,EAAFnB,EAAEmB,YAAaC,EAAfpB,EAAeoB,eAAf,OACrBlB,EAAAC,EAAAC,cAAA,SAAOC,UAAY,aACXgB,KAAO,SACPC,YAAeH,EACfI,SAAYH,MCNXI,EAAS,SAAAxB,GAAgB,IAAdyB,EAAczB,EAAdyB,SACpB,OACIvB,EAAAC,EAAAC,cAAA,OAAKsB,MAAS,CAACC,UAAW,SACXC,OAAQ,oBACRC,OAAQ,UAClBJ,ICyCEK,qBAzCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcFd,eAAiB,SAAAkB,GACfP,EAAKQ,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzCX,EAAKY,MAAQ,CACP9B,SAAU,GACV2B,YAAc,IALRT,mFASM,IAAAa,EAAAV,KAClBW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAC1B,SAAWoC,uCAOlC,IAAAC,EACyBhB,KAAKS,MAA9B9B,EADAqC,EACArC,SAAU2B,EADVU,EACUV,YACXW,EACAtC,EAASuC,OAAO,SAAArC,GAAI,OAClBA,EAAKL,KAAK2C,cAAcC,SAASd,EAAYa,iBAErD,OAAQxC,EAAS0C,OAGbrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACoD,EAAD,CAAWrC,YAAc,kBACfC,eAAkBc,KAAKd,iBAEjClB,EAAAC,EAAAC,cAACqD,EAAD,KACEvD,EAAAC,EAAAC,cAACsD,EAAD,CAAU7C,SAAYsC,MAR5BjD,EAAAC,EAAAC,cAAA,+BA3BYuD,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.5e3f9c22.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = ({monster}) => (\r\n    <div className = 'card-container'>\r\n        <img alt ='monster' \r\n        src = {`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n        />\r\n        <h2> { monster.name } </h2>\r\n        <p>{ monster.email }</p>\r\n    </div>\r\n) ;\r\n\r\n//destructuring the props","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = ({monsters}) => {\r\n    return (\r\n    <div className = 'card-list'>\r\n      {\r\n        monsters.map((item) => \r\n            <Card key = { item.id } monster = {item}/>\r\n        )\r\n      }\r\n    </div>\r\n    );\r\n}\r\n\r\n//instead of props.monsters we destructure it-ES6","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeHolder, onSearchChange}) => (\r\n    <input className = 'search-box'\r\n            type = 'search' \r\n            placeholder = {placeHolder}\r\n            onChange = {onSearchChange}\r\n    />\r\n);","import React from 'react';\r\n\r\nexport const Scroll = ({children}) => {\r\n    return (\r\n        <div style = {{overflowY: 'scroll', \r\n                       border: '1px solid #95dada',\r\n                       height: '320px'}}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\n//props.children allows us to access CardList component.\r\n//Destructuring it","import React, { Component } from 'react';\nimport {CardList} from '../../components/card-list/card-list.component';\nimport {SearchBox} from '../../components/search-box/search-box.component.jsx';\nimport {Scroll} from '../../components/scroll/scroll.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n          monsters: [],\n          searchField : ''\n      }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters : users}));\n  }\n\n  onSearchChange = event => {\n    this.setState({searchField: event.target.value})\n  }\n  \n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = \n          monsters.filter(item => \n            item.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n    return !monsters.length ?\n      <h1>Loading...</h1> :\n      (\n        <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n          <SearchBox placeHolder = 'Search Monsters'\n                    onSearchChange = {this.onSearchChange}\n          />\n          <Scroll>\n            <CardList monsters = {filteredMonsters}/>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;\n\n//key included as there are several items of same type\n//ternary used instead of if else","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}